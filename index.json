[{
    "title": "搜索",
    "url": "/search/",
    "content": ""
  },{
    "title": "Firstfood",
    "url": "/food/firstfood/",
    "content": ""
  },{
    "title": "如何部署hugo到github",
    "url": "/posts/%E9%83%A8%E7%BD%B2hugo%E5%88%B0github/",
    "content": "部署 Hugo 到 GitHub Pages 将 Hugo 生成的网站部署到 GitHub Pages 上是一个常见的做法。以下是一步步的部署指南。\n第一步：安装 Hugo 首先确保你已经在本地安装了 Hugo。如果还没有安装，可以根据 Hugo 官方文档进行安装。\n第二步：初始化 Git 仓库 进入你的 Hugo 网站目录并初始化 Git 仓库：\ncd /path/to/your/hugo/site git init 创建一个 .gitignore 文件，并添加 Hugo 特有的忽略规则：\necho \u0026#34;/public/\u0026#34; \u0026gt;\u0026gt; .gitignore echo \u0026#34;/resources/\u0026#34; \u0026gt;\u0026gt; .gitignore 第三步：创建 GitHub 仓库 登录到 GitHub。 创建一个新的仓库。例如，你可以命名为 my-hugo-site。 复制仓库的 URL，例如 https://github.com/yourusername/my-hugo-site.git。 第四步：配置 Hugo 网站生成路径 修改 Hugo 配置文件（通常是 config.toml），添加或修改 baseURL，使其指向你 GitHub Pages 的 URL。例如：\nbaseURL = \u0026#34;https://yourusername.github.io/my-hugo-site/\u0026#34; 第五步：构建 Hugo 网站 在本地构建 Hugo 网站：\nhugo 这会在 public/ 文件夹中生成静态文件。\n第六步：添加 GitHub 远程仓库 将你的本地仓库连接到 GitHub 远程仓库：\ngit remote add origin https://github.com/yourusername/my-hugo-site.git 第七步：配置部署到 GitHub Pages 使用 gh-pages 分支 创建一个新的分支 gh-pages 用于存放静态文件：\ngit checkout -b gh-pages 将 public/ 文件夹的内容添加到 Git 仓库：\ncp -r public/* . git add . git commit -m \u0026#34;Deploy to GitHub Pages\u0026#34; 推送到 GitHub 上的 gh-pages 分支：\ngit push -u origin gh-pages 配置 GitHub Pages 登录 GitHub，打开你的仓库页面。 点击 Settings。 在左侧选择 Pages。 在 Source 选择 gh-pages 分支，然后保存。 第八步：自动化部署（可选） 为了实现每次更新自动部署，你可以使用 GitHub Actions 来自动化部署过程。以下是一个简单的 GitHub Actions 配置，自动构建和部署 Hugo 网站：\n在仓库根目录创建 .github/workflows/deploy.yml 文件，内容如下：\nname: Deploy Hugo to GitHub Pages on: push: branches: - main # 只在 main 分支更新时触发 jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout code uses: actions/checkout@v2 - name: Setup Hugo uses: peaceiris/actions-hugo@v2 with: hugo-version: \u0026#39;0.81.0\u0026#39; # 使用你需要的 Hugo 版本 - name: Build Hugo run: hugo --minify - name: Deploy to GitHub Pages uses: peaceiris/actions-gh-pages@v3 with: github_token: ${{ secrets.GITHUB_TOKEN }} publish_dir: ./public 这个配置会在每次向 main 分支推送时自动构建并将 public 目录中的内容部署到 gh-pages 分支。\n第九步：访问你的 GitHub Pages 网站 部署完成后，你可以访问 https://yourusername.github.io/my-hugo-site/ 来查看你的网站。\n"
  },{
    "title": "如何设置ssh登陆github",
    "url": "/posts/ssh_github_%E5%85%8D%E5%AF%86%E7%A0%81%E6%8E%A8%E9%80%81/",
    "content": "配置 SSH 免密码推送 GitHub 仓库 SSH 是最推荐的方式，配置一次后就可以免输入密码推送，非常适合 Hugo 部署和开发。下面是完整配置步骤（适用于 macOS、Linux、Windows）：\n第一部：生成 SSH 密钥 在终端执行以下命令（可以直接回车，不改路径）：\nssh-keygen -t ed25519 -C \u0026#34;你的GitHub邮箱\u0026#34; 执行后会看到：\nGenerating public/private ed25519 key pair. Enter file in which to save the key (/你的用户名/.ssh/id_ed25519): 这里直接按回车就行。\n如果提示 overwrite（覆盖），说明你之前已经生成过了，可以先备份或取消。\n✅ 第二步：启动 ssh-agent 并添加密钥 执行以下命令启动 ssh-agent 并添加密钥：\neval \u0026#34;$(ssh-agent -s)\u0026#34; ssh-add ~/.ssh/id_ed25519 ✅ 第三步：复制 SSH 公钥 执行以下命令，复制 SSH 公钥：\ncat ~/.ssh/id_ed25519.pub 复制整段输出的内容（从 ssh-ed25519 开始，到你的邮箱为止）。\n✅ 第四步：添加到 GitHub 登录 GitHub → 点右上角头像 → Settings。 左侧栏点 SSH and GPG keys → 点绿色按钮 New SSH key。 Title 随便填，例如：My Mac SSH，Paste key 里粘贴刚才复制的内容。 点 Add SSH key。 ✅ 第五步：修改仓库地址为 SSH 模式 执行下面命令，把远程仓库从 HTTPS 改成 SSH：\ngit remote set-url origin git@github.com:pzdnzj/hexo-blog.git 验证一下：\ngit remote -v 输出应该是：\norigin git@github.com:pzdnzj/hexo-blog.git (fetch) origin git@github.com:pzdnzj/hexo-blog.git (push) ✅ 第六步：推送测试 执行以下命令进行推送测试：\ngit push -u origin main 如果第一次连接，会提示：\nThe authenticity of host \u0026#39;github.com (IP)\u0026#39; can\u0026#39;t be established... 输入 yes 回车即可。成功后就会推送成功，以后再也不用输密码或 Token。\n"
  },{
    "title": "常用命令速查表",
    "url": "/posts/blog/",
    "content": "Hugo 中文博客常用命令速查表 整理自 Hugo 官方文档与中文博客实践，适合初学者及常用写作需求。\n🛠 基础命令 命令 说明 hugo new site myblog 创建新站点 myblog 文件夹 cd myblog 进入博客目录 hugo server 启动本地预览（不显示草稿） hugo server -D 或 --buildDrafts 启动本地预览 + 显示草稿文章 hugo 生成静态网站文件到 public/ 目录 📝 写作相关 命令 说明 hugo new posts/文章标题.md 创建新文章（保存到 content/posts/） hugo new content/自定义路径/文章.md 自定义目录创建内容 ./new.sh 文章名 一键脚本创建文章（需配置 new.sh） 🧰 主题管理 命令 说明 git submodule add \u0026lt;主题地址\u0026gt; themes/\u0026lt;主题名\u0026gt; 安装主题为子模块 theme = \u0026quot;\u0026lt;主题名\u0026gt;\u0026quot;（在 hugo.toml 中） 设置当前使用的主题 🚀 发布部署 命令 说明 hugo 生成静态网页（输出至 public/） 上传 public/ 到 GitHub Pages、服务器、CDN 等 实现网站上线 🧪 常用预览选项 命令 说明 hugo server -D -F 显示草稿 + 显示未来文章 hugo server --disableFastRender 禁用快速渲染（调试时用） hugo server -p 8080 本地预览改用端口 8080 💡 小贴士 推荐写作前先执行 hugo server，可实时预览效果 写完执行 hugo，即可将所有内容输出到 public/ 准备上线 所有 .md 文件支持中文命名 建议使用 VS Code 编辑 .md 更方便 文档作者：你自己\n更新时间：{{自动更新日期可手动填写}}\n"
  }]